version: '3'

services:
  apache2:
    build: apache2
    restart: always
    volumes:
      - apache2_log:/var/log/apache2
      - ftp:/srv/ftp:ro
      - letsencrypt:/etc/letsencrypt:ro
    networks:
      - frontend
    ports:
      - "80:80"
      - "443:443"

  pyftpd:
    build: pyftpd
    restart: always
    environment:
      - SSL_ENABLE=${FTP_SSL_ENABLE}
      - PASV_PORT_MIN=${FTP_PASV_PORT_MIN}
      - PASV_PORT_MAX=${FTP_PASV_PORT_MAX}
    volumes:
      - pyftpd_log:/var/log/pyftpd
      - ftp:/srv/ftp
      - letsencrypt:/etc/letsencrypt:ro
    networks:
      - cgserver
    ports:
      - "21:21"
      - "2121:21"
      - "${FTP_PASV_PORT_MIN}-${FTP_PASV_PORT_MAX}:${FTP_PASV_PORT_MIN}-${FTP_PASV_PORT_MAX}"

  radius:
    build: radius
    restart: always
    networks:
      - cgserver
      - pptp
      - l2tp

  netredirect:
    build: netredirect
    restart: always
    volumes:
      - letsencrypt:/etc/letsencrypt:ro
    networks:
      - pptp
      - l2tp
      - openvpn
      - openvpn_tcp

  pptp:
    build: pptp
    depends_on:
      - radius
      - netredirect
    restart: always
    networks:
      - pptp
    ports:
      - "1723:1723"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    devices:
      - /dev/ppp
    sysctls:
      - net.ipv4.ip_forward=1

  l2tp:
    build: l2tp
    depends_on:
      - radius
      - netredirect
    restart: always
    environment:
      - VPN_IPSEC_PSK=${L2TP_VPN_IPSEC_PSK}
    networks:
      - l2tp
    ports:
      - "500:500/udp"
      - "4500:4500/udp"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    devices:
      - /dev/ppp
    sysctls:
      - net.ipv4.ip_forward=1

  openvpn:
    build: openvpn
    depends_on:
      - netredirect
    restart: always
    networks:
      - openvpn
      - cgserver
    ports:
      - "1194:1194/udp"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    devices:
      - /dev/net/tun
    sysctls:
      - net.ipv4.ip_forward=1

  openvpn_tcp:
    build:
      context: openvpn
      dockerfile: Dockerfile.tcp
    depends_on:
      - netredirect
    restart: always
    networks:
      - openvpn_tcp
      - cgserver
    ports:
      - "1194:1194"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    devices:
      - /dev/net/tun
    sysctls:
      - net.ipv4.ip_forward=1

  mysql:
    image: mysql
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - mysql:/var/lib/mysql
    networks:
      - backend

  mongo:
    restart: always
    image: mongo
    volumes:
      - mongo:/data/db
    healthcheck:
      test: echo 'db.stats().ok' | mongo localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - mongo

  redis:
    restart: always
    image: redis
    volumes:
      - redis:/data
    networks:
      - redis

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    restart: always
    environment:
      PMA_HOST: mysql
      PMA_ABSOLUTE_URI: /phpmyadmin/
    networks:
      - frontend
      - backend

  php:
    build: php
    restart: always
    volumes:
      - ftp:/srv/ftp:ro
    networks:
      - frontend
      - backend

  cgserver:
    build: cgserver
    depends_on:
      - mysql
    restart: always
    environment:
      - L2TP_VPN_IPSEC_PSK=${L2TP_VPN_IPSEC_PSK}
      - SHARELATEX_API_SECRET=${CGSERVER_SHARELATEX_API_SECRET}
    networks:
      - frontend
      - backend
      - cgserver

  csvn:
    build: csvn
    restart: always
    volumes:
      - csvn:/var/csvn
    networks:
      - frontend

  sharelatex:
    build: sharelatex
    restart: always
    depends_on:
      - mongo
      - redis
    networks:
      - frontend
      - mongo
      - redis
    volumes:
      - sharelatex:/var/lib/sharelatex
    environment:
      CGSERVER_API_SECRET: ${CGSERVER_SHARELATEX_API_SECRET}
      SHARELATEX_APP_NAME: Overleaf Community Edition
      SHARELATEX_MONGO_URL: mongodb://mongo/sharelatex
      SHARELATEX_REDIS_HOST: redis
      REDIS_HOST: redis
      ENABLED_LINKED_FILE_TYPES: 'url,project_file'
      ENABLE_CONVERSIONS: 'true'
      SHARELATEX_BEHIND_PROXY: 'true'
      SHARELATEX_RESTRICT_INVITES_TO_EXISTING_ACCOUNTS: 'true'
      SHARELATEX_ALLOW_PUBLIC_ACCESS: 'true'
      SHARELATEX_ALLOW_ANONYMOUS_READ_AND_WRITE_SHARING: 'true'
      DOCKER_RUNNER: 'false'

  download:
    build: download
    restart: always
    volumes:
      - download:/mnt/download
    networks:
      - frontend
    cap_add:
      - NET_ADMIN
      - NET_RAW

  letsencrypt:
    build: letsencrypt
    depends_on:
      - apache2
    environment:
      - DOMAINS=${LETSENCRYPT_DOMAINS}
    volumes:
      - letsencrypt:/etc/letsencrypt
    networks:
      - letsencrypt

  backup:
    build: backup
    volumes:
      - ftp:/mnt/ftp:ro
      - csvn:/mnt/csvn:ro
      - mysql:/mnt/mysql:ro
      - backup_cache:/mnt/backup_cache
      - backup_storage:/mnt/backup_storage
      - ./backup/backup.py:/backup.py:ro
      - ./backup/exclude:/etc/cgservice/backup/exclude:ro
      - ./backup/ignore:/etc/cgservice/backup/ignore:ro

networks:
  frontend:

  backend:

  pptp:

  l2tp:

  openvpn:

  openvpn_tcp:

  mongo:

  redis:

  cgserver:

  letsencrypt:

volumes:
  apache2_log:

  ftp:

  pyftpd_log:

  letsencrypt:

  mysql:

  mongo:

  redis:

  csvn:

  sharelatex:

  backup_cache:

  backup_storage:

  download:
